# launch_firewall_safe.py
"""
Script de lancement s√©curis√© pour environnements avec firewall
"""

import os
import sys
import argparse
import socket
from interface.gradio_interface import MICRGradioInterface

def get_local_ip():
    """R√©cup√®re l'IP locale"""
    try:
        # Cr√©er une socket pour d√©couvrir l'IP locale
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        local_ip = s.getsockname()[0]
        s.close()
        return local_ip
    except:
        return "127.0.0.1"

def check_port_available(host, port):
    """V√©rifie si un port est disponible"""
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(1)
        result = s.connect_ex((host, port))
        s.close()
        return result != 0  # True si port disponible
    except:
        return False

def find_available_port(host, start_port=7860):
    """Trouve un port disponible"""
    for port in range(start_port, start_port + 20):
        if check_port_available(host, port):
            return port
    return start_port

def main():
    """Lancement s√©curis√© firewall"""
    
    parser = argparse.ArgumentParser(description="MICR Reader - Mode firewall safe")
    parser.add_argument('--api-key', type=str, help="Cl√© API OpenAI")
    parser.add_argument('--port', type=int, default=7860, help="Port pr√©f√©r√©")
    parser.add_argument('--localhost-only', action='store_true', help="Localhost uniquement (127.0.0.1)")
    parser.add_argument('--debug', action='store_true', help="Mode debug")
    
    args = parser.parse_args()
    
    print("üõ°Ô∏è  MICR Reader - Mode Firewall Safe")
    print("=" * 50)
    
    # V√©rifier la cl√© API
    api_key = args.api_key or os.getenv('OPENAI_API_KEY')
    if not api_key or api_key == 'votre-cl√©-api-openai':
        print("‚ùå Cl√© API OpenAI manquante !")
        print("üí° Utilisez: python launch_firewall_safe.py --api-key sk-votre-cl√©")
        return
    
    # D√©terminer l'host
    if args.localhost_only:
        host = "127.0.0.1"
        print("üè† Mode localhost uniquement")
    else:
        host = "0.0.0.0"
        local_ip = get_local_ip()
        print(f"üåê Mode r√©seau local (IP: {local_ip})")
    
    # Trouver un port disponible
    port = find_available_port(host, args.port)
    if port != args.port:
        print(f"‚ö†Ô∏è  Port {args.port} occup√©, utilisation du port {port}")
    else:
        print(f"‚úÖ Port {port} disponible")
    
    print(f"\nüöÄ Configuration finale:")
    print(f"   Host: {host}")
    print(f"   Port: {port}")
    print(f"   URL: http://{'localhost' if host == '127.0.0.1' else local_ip if 'local_ip' in locals() else host}:{port}")
    
    if not args.localhost_only:
        print(f"\nüì± Pour partage r√©seau local:")
        print(f"   URL √† partager: http://{get_local_ip()}:{port}")
        print(f"   (Fonctionne sur le m√™me WiFi/r√©seau)")
    
    print(f"\nüõ°Ô∏è  Avantages mode firewall safe:")
    print(f"   ‚Ä¢ Aucune connexion internet sortante")
    print(f"   ‚Ä¢ Pas de tentative de tunnel public")
    print(f"   ‚Ä¢ Compatible environnements s√©curis√©s")
    print(f"   ‚Ä¢ D√©tection automatique de port")
    
    try:
        # Cr√©er et lancer l'interface
        interface = MICRGradioInterface(
            api_key=api_key,
            share=False,  # Jamais de partage public
            server_name=host,
            server_port=port
        )
        
        print(f"\nüí° Conseils pour la d√©monstration:")
        print(f"   ‚Ä¢ Interface 100% locale - aucun risque s√©curit√©")
        print(f"   ‚Ä¢ Pr√©parez des images de test √† l'avance")
        print(f"   ‚Ä¢ Utilisez des ch√®ques canadiens de bonne qualit√©")
        print(f"   ‚Ä¢ Montrez le syst√®me de confiance tri-modal")
        
        print(f"\nüé¨ Interface pr√™te - Mode s√©curis√© activ√©!")
        print(f"{'='*50}\n")
        
        # Lancement
        interface.launch(
            share=False,
            server_name=host,
            server_port=port,
            debug=args.debug,
            show_error=True,
            quiet=False,
            prevent_thread_lock=False
        )
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Interface ferm√©e par l'utilisateur")
    except Exception as e:
        print(f"\n‚ùå Erreur: {e}")
        if args.debug:
            import traceback
            traceback.print_exc()

if __name__ == "__main__":
    main()
