# test_cheque_optional.py
"""
Test pour v√©rifier que le syst√®me fonctionne sans num√©ro de ch√®que
"""

from core.micr_analyzer import MICRAnalyzer
from core.validator import MICRValidator  
from models.micr_models import MICRResult, MICRComponent, ComponentType
from config import config

def test_cheque_optional_validation():
    """Test de validation sans num√©ro de ch√®que"""
    
    print("üß™ TEST: Validation MICR sans num√©ro de ch√®que")
    print("=" * 50)
    
    # Cr√©er un validateur
    validator = MICRValidator()
    
    # Simuler un r√©sultat MICR SANS num√©ro de ch√®que
    result_sans_cheque = MICRResult(
        raw_line="‚ëÜ 12345 ‚ëÜ 003 ‚ëà 987654321 ‚ëà",
        raw_confidence=0.95,
        success=True,
        transit_number=MICRComponent(
            value="12345",
            description="Num√©ro de transit",
            llm_confidence=0.95,
            logprob_confidence=0.90,
            combined_confidence=0.93,
            component_type=ComponentType.TRANSIT
        ),
        institution_number=MICRComponent(
            value="003",
            description="Num√©ro d'institution",
            llm_confidence=0.97,
            logprob_confidence=0.92,
            combined_confidence=0.95,
            component_type=ComponentType.INSTITUTION
        ),
        account_number=MICRComponent(
            value="987654321",
            description="Num√©ro de compte",
            llm_confidence=0.93,
            logprob_confidence=0.88,
            combined_confidence=0.91,
            component_type=ComponentType.ACCOUNT
        ),
        cheque_number=None  # PAS DE NUM√âRO DE CH√àQUE
    )
    
    # Valider
    validation = validator.validate_canadian_micr(result_sans_cheque)
    
    print(f"üìä R√âSULTATS DE VALIDATION:")
    print(f"   ‚úÖ Globalement valide: {validation.is_valid}")
    print(f"   üè¶ Transit valide: {validation.transit_valid}")
    print(f"   üè¢ Institution valide: {validation.institution_valid}")
    print(f"   üí≥ Compte valide: {validation.account_valid}")
    print(f"   üìã Format valide: {validation.format_valid}")
    print()
    
    print(f"‚ö†Ô∏è  AVERTISSEMENTS ({len(validation.warnings)}):")
    for warning in validation.warnings:
        print(f"   ‚Ä¢ {warning}")
    print()
    
    print(f"‚ùå ERREURS ({len(validation.errors)}):")
    for error in validation.errors:
        print(f"   ‚Ä¢ {error}")
    print()
    
    # Simuler un r√©sultat AVEC num√©ro de ch√®que pour comparaison
    result_avec_cheque = MICRResult(
        raw_line="001234 ‚ëÜ 12345 ‚ëÜ 003 ‚ëà 987654321 ‚ëà",
        raw_confidence=0.97,
        success=True,
        transit_number=MICRComponent(
            value="12345",
            description="Num√©ro de transit",
            llm_confidence=0.95,
            logprob_confidence=0.90,
            combined_confidence=0.93,
            component_type=ComponentType.TRANSIT
        ),
        institution_number=MICRComponent(
            value="003",
            description="Num√©ro d'institution",
            llm_confidence=0.97,
            logprob_confidence=0.92,
            combined_confidence=0.95,
            component_type=ComponentType.INSTITUTION
        ),
        account_number=MICRComponent(
            value="987654321",
            description="Num√©ro de compte",
            llm_confidence=0.93,
            logprob_confidence=0.88,
            combined_confidence=0.91,
            component_type=ComponentType.ACCOUNT
        ),
        cheque_number=MICRComponent(
            value="001234",
            description="Num√©ro de ch√®que",
            llm_confidence=0.89,
            logprob_confidence=0.85,
            combined_confidence=0.87,
            component_type=ComponentType.CHEQUE
        )
    )
    
    validation_avec = validator.validate_canadian_micr(result_avec_cheque)
    
    print(f"üîÑ COMPARAISON AVEC CH√àQUE:")
    print(f"   ‚úÖ Globalement valide: {validation_avec.is_valid}")
    print(f"   ‚ö†Ô∏è  Avertissements: {len(validation_avec.warnings)}")
    print(f"   ‚ùå Erreurs: {len(validation_avec.errors)}")
    print()
    
    # V√©rifier que les deux sont valides
    if validation.is_valid and validation_avec.is_valid:
        print("üéØ SUCC√àS: Les deux cas (avec et sans ch√®que) sont valides!")
    else:
        print("‚ùå √âCHEC: Un des cas n'est pas valide")
        
    print(f"\nüí° CONFIGURATION:")
    print(f"   Ch√®que requis: {config.micr.cheque_required}")
    print(f"   R√©gion: {config.micr.region}")

def test_prompt_examples():
    """Test des exemples dans le prompt"""
    
    print("\nüîç EXEMPLES DU PROMPT:")
    print("=" * 30)
    
    from prompts import get_micr_prompt
    
    prompt = get_micr_prompt()
    
    # V√©rifier que les exemples sans ch√®que sont pr√©sents
    if 'SANS num√©ro de ch√®que' in prompt:
        print("‚úÖ Exemples sans num√©ro de ch√®que pr√©sents dans le prompt")
    else:
        print("‚ùå Exemples sans num√©ro de ch√®que manquants")
        
    if 'OPTIONNEL' in prompt:
        print("‚úÖ Indication que le ch√®que est optionnel pr√©sente")
    else:
        print("‚ùå Indication d'optionalit√© manquante")
        
    if 'OBLIGATOIRE' in prompt:
        print("‚úÖ Indication des champs obligatoires pr√©sente")
    else:
        print("‚ùå Indication des champs obligatoires manquante")

if __name__ == "__main__":
    try:
        test_cheque_optional_validation()
        test_prompt_examples()
        print("\nüöÄ TESTS TERMIN√âS - Le syst√®me est configur√© pour accepter les ch√®ques sans num√©ro!")
    except Exception as e:
        print(f"\n‚ùå ERREUR LORS DU TEST: {e}")
        import traceback
        traceback.print_exc()
