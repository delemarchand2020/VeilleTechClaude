# check_installation.py
"""
Script de v√©rification de l'installation du MICR Reader
"""

import sys
import os

def check_python_version():
    """V√©rifie la version de Python"""
    print("üêç V√©rification de Python...")
    version = sys.version_info
    if version.major >= 3 and version.minor >= 8:
        print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} - OK")
        return True
    else:
        print(f"‚ùå Python {version.major}.{version.minor}.{version.micro} - Version trop ancienne (minimum 3.8)")
        return False

def check_dependencies():
    """V√©rifie les d√©pendances"""
    print("\nüì¶ V√©rification des d√©pendances...")
    dependencies = ['openai', 'PIL', 'json', 'time', 'base64']
    missing = []
    
    for dep in dependencies:
        try:
            if dep == 'PIL':
                from PIL import Image
                print(f"‚úÖ Pillow (PIL) - OK")
            elif dep == 'openai':
                import openai
                print(f"‚úÖ OpenAI - OK")
            else:
                __import__(dep)
                print(f"‚úÖ {dep} - OK")
        except ImportError:
            print(f"‚ùå {dep} - MANQUANT")
            missing.append(dep)
    
    return len(missing) == 0

def check_project_structure():
    """V√©rifie la structure du projet"""
    print("\nüìÅ V√©rification de la structure du projet...")
    
    required_files = [
        'config.py',
        'README.md',
        'requirements.txt',
        'models/__init__.py',
        'models/micr_models.py',
        'core/__init__.py',
        'core/confidence_calculator.py',
        'core/micr_analyzer.py',
        'core/validator.py',
        'utils/__init__.py',
        'utils/image_utils.py',
        'examples/__init__.py',
        'examples/basic_usage.py',
        'examples/batch_processing.py',
        'examples/demo_interface.py',
        'interface/__init__.py',
        'interface/gradio_interface.py',
        'launch_demo.py',
        'tests/__init__.py',
        'tests/test_confidence.py',
        'tests/test_validator.py'
    ]
    
    missing_files = []
    for file_path in required_files:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path} - MANQUANT")
            missing_files.append(file_path)
    
    return len(missing_files) == 0

def check_imports():
    """V√©rifie que les modules peuvent √™tre import√©s"""
    print("\nüîß V√©rification des imports...")
    
    try:
        from config import config
        print("‚úÖ config - OK")
    except Exception as e:
        print(f"‚ùå config - ERREUR: {e}")
        return False
    
    try:
        from models.micr_models import MICRResult, MICRComponent, ComponentType
        print("‚úÖ models.micr_models - OK")
    except Exception as e:
        print(f"‚ùå models.micr_models - ERREUR: {e}")
        return False
    
    try:
        from core.confidence_calculator import ConfidenceCalculator
        print("‚úÖ core.confidence_calculator - OK")
    except Exception as e:
        print(f"‚ùå core.confidence_calculator - ERREUR: {e}")
        return False
    
    try:
        from core.validator import MICRValidator
        print("‚úÖ core.validator - OK")
    except Exception as e:
        print(f"‚ùå core.validator - ERREUR: {e}")
        return False
    
    try:
        from utils.image_utils import ImageProcessor
        print("‚úÖ utils.image_utils - OK")
    except Exception as e:
        print(f"‚ùå utils.image_utils - ERREUR: {e}")
        return False
    
    return True

def check_config():
    """V√©rifie la configuration"""
    print("\n‚öôÔ∏è  V√©rification de la configuration...")
    
    try:
        from config import config
        
        # V√©rifier si la cl√© API est configur√©e
        if config.openai.api_key == 'votre-cl√©-api-openai':
            print("‚ö†Ô∏è  Cl√© API OpenAI non configur√©e (utilise la valeur par d√©faut)")
            print("   Modifiez config.py ou d√©finissez OPENAI_API_KEY")
        else:
            print("‚úÖ Cl√© API OpenAI configur√©e")
        
        # V√©rifier les poids de confiance
        total_weight = (config.confidence.llm_weight + 
                       config.confidence.logprob_weight + 
                       config.confidence.validation_weight)
        
        if abs(total_weight - 1.0) < 0.01:
            print("‚úÖ Poids de confiance valides")
        else:
            print(f"‚ùå Poids de confiance invalides (total: {total_weight})")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur de configuration: {e}")
        return False

def run_basic_test():
    """Execute un test basique"""
    print("\nüß™ Test basique...")
    
    try:
        from models.micr_models import MICRResult, MICRComponent, ComponentType
        from core.validator import MICRValidator
        
        # Cr√©er un composant de test
        test_component = MICRComponent(
            value="12345",
            description="Test transit",
            llm_confidence=0.9,
            logprob_confidence=0.8,
            combined_confidence=0.85,
            component_type=ComponentType.TRANSIT
        )
        
        # Cr√©er un r√©sultat de test
        test_result = MICRResult(
            raw_line="‚ëÜ12345‚ëÜ003‚ëà1234567890‚ëà001‚ëÜ",
            raw_confidence=0.9,
            success=True,
            transit_number=test_component
        )
        
        # Tester le validateur
        validator = MICRValidator()
        validation = validator.validate_canadian_micr(test_result)
        
        print("‚úÖ Test basique r√©ussi")
        print(f"   - Composant cr√©√©: {test_component.value}")
        print(f"   - Validation: {validation.transit_valid}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Test basique √©chou√©: {e}")
        return False

def main():
    """Fonction principale de v√©rification"""
    print("üîç V√âRIFICATION DE L'INSTALLATION MICR READER")
    print("=" * 60)
    
    checks = [
        ("Version Python", check_python_version),
        ("D√©pendances", check_dependencies),
        ("Structure du projet", check_project_structure),
        ("Imports des modules", check_imports),
        ("Configuration", check_config),
        ("Test basique", run_basic_test)
    ]
    
    results = []
    for name, check_func in checks:
        try:
            result = check_func()
            results.append((name, result))
        except Exception as e:
            print(f"‚ùå Erreur lors de {name}: {e}")
            results.append((name, False))
    
    # R√©sum√© final
    print("\n" + "=" * 60)
    print("üìä R√âSUM√â DE LA V√âRIFICATION")
    print("=" * 60)
    
    passed = 0
    for name, result in results:
        status = "‚úÖ PASS√â" if result else "‚ùå √âCHEC"
        print(f"{status} - {name}")
        if result:
            passed += 1
    
    print(f"\nR√©sultat: {passed}/{len(results)} v√©rifications r√©ussies")
    
    if passed == len(results):
        print("\nüéâ INSTALLATION COMPL√àTE ET FONCTIONNELLE !")
        print("Vous pouvez maintenant utiliser le MICR Reader.")
        print("\nProchaines √©tapes:")
        print("1. Configurez votre cl√© API OpenAI")
        print("2. Testez avec: python examples/basic_usage.py")
    else:
        print(f"\n‚ö†Ô∏è  Installation incompl√®te ({len(results)-passed} probl√®mes)")
        print("Veuillez corriger les erreurs ci-dessus.")

if __name__ == "__main__":
    main()
